package main

import (
	"fmt"
	"math"
	"math/rand"
	"strings"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

var a = 50.0
var b = 150.0

type MenuItemInfo struct {
	Path string
	Item *fyne.MenuItem
}

type TrialResult struct {
	TrialNum     int
	Path         string
	ActualTimeMs int64
	HickTimeMs   float64
}

var (
	allMenuItems []MenuItemInfo
	targetItem   MenuItemInfo
	startTime    time.Time
	trialCount   = 0
	maxTrials    = 10
	results      []TrialResult
)

func main() {
	rand.Seed(time.Now().UnixNano())
	myApp := app.New()
	myWindow := myApp.NewWindow("–¢–µ—Å—Ç –•–∏–∫–∞ ‚Äî –ú–µ–Ω—é")
	myWindow.Resize(fyne.NewSize(900, 600))

	instruction := widget.NewLabel("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")
	output := widget.NewMultiLineEntry()
	output.SetMinRowsVisible(20)
	output.Wrapping = fyne.TextWrapWord
	output.Hide()

	var startButton *widget.Button
	startButton = widget.NewButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", func() {
		startButton.Hide()
		output.Show()
		instruction.SetText("–¢–µ—Å—Ç –Ω–∞—á–∞–ª—Å—è! –°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –Ω–∏–∂–µ üëá")
		nextTrial(instruction, output)
	})

	// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	fileMenu := fyne.NewMenu("–§–∞–π–ª",
		createMenuItem("–°–æ–∑–¥–∞—Ç—å", output, instruction, "–§–∞–π–ª"),
		createMenuItem("–û—Ç–∫—Ä—ã—Ç—å", output, instruction, "–§–∞–π–ª"),
		createMenuItem("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", output, instruction, "–§–∞–π–ª"),
		createSubMenu("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", []*fyne.MenuItem{
			createMenuItem("–¢–µ–∫—Å—Ç RTF", output, instruction, "–§–∞–π–ª", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫"),
			createSubMenu("–§–æ—Ä–º–∞—Ç—ã XML", []*fyne.MenuItem{
				createMenuItem("Office Open XML", output, instruction, "–§–∞–π–ª", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", "–§–æ—Ä–º–∞—Ç—ã XML"),
				createMenuItem("OpenDocument", output, instruction, "–§–∞–π–ª", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", "–§–æ—Ä–º–∞—Ç—ã XML"),
			}, output, instruction, "–§–∞–π–ª", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫"),
			createMenuItem("–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", output, instruction, "–§–∞–π–ª", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫"),
			createSubMenu("–î—Ä—É–≥–∏–µ", []*fyne.MenuItem{
				createMenuItem("PDF", output, instruction, "–§–∞–π–ª", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", "–î—Ä—É–≥–∏–µ"),
				createSubMenu("–≠–∫—Å–ø–æ—Ä—Ç –≤", []*fyne.MenuItem{
					createMenuItem("PNG", output, instruction, "–§–∞–π–ª", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", "–î—Ä—É–≥–∏–µ", "–≠–∫—Å–ø–æ—Ä—Ç –≤"),
					createMenuItem("JPEG", output, instruction, "–§–∞–π–ª", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", "–î—Ä—É–≥–∏–µ", "–≠–∫—Å–ø–æ—Ä—Ç –≤"),
				}, output, instruction, "–§–∞–π–ª", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", "–î—Ä—É–≥–∏–µ"),
			}, output, instruction, "–§–∞–π–ª", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫"),
		}, output, instruction, "–§–∞–π–ª"),
		createMenuItem("–ü–µ—á–∞—Ç—å", output, instruction, "–§–∞–π–ª"),
		createMenuItem("–í—ã—Ö–æ–¥", output, instruction, "–§–∞–π–ª"),
	)

	editMenu := fyne.NewMenu("–ü—Ä–∞–≤–∫–∞",
		createMenuItem("–û—Ç–º–µ–Ω–∏—Ç—å", output, instruction, "–ü—Ä–∞–≤–∫–∞"),
		createMenuItem("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", output, instruction, "–ü—Ä–∞–≤–∫–∞"),
		createMenuItem("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", output, instruction, "–ü—Ä–∞–≤–∫–∞"),
		createMenuItem("–í—Å—Ç–∞–≤–∏—Ç—å", output, instruction, "–ü—Ä–∞–≤–∫–∞"),
	)

	helpMenu := fyne.NewMenu("–°–ø—Ä–∞–≤–∫–∞",
		createMenuItem("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", output, instruction, "–°–ø—Ä–∞–≤–∫–∞"),
	)

	myWindow.SetMainMenu(fyne.NewMainMenu(fileMenu, editMenu, helpMenu))
	myWindow.SetContent(container.NewVBox(instruction, startButton, output))
	myWindow.ShowAndRun()
}

func createMenuItem(label string, output *widget.Entry, instruction *widget.Label, parent ...string) *fyne.MenuItem {
	fullPath := buildFullPath(label, parent)
	item := fyne.NewMenuItem(label, func() {
		fmt.Printf("üëâ –ù–∞–∂–∞—Ç –ø—É–Ω–∫—Ç: %s\n", fullPath)
		if targetItem.Path == fullPath {
			handleCorrectSelection(fullPath, output, instruction)
		} else {
			showWrongSelection(fullPath, output)
		}
	})
	allMenuItems = append(allMenuItems, MenuItemInfo{Path: fullPath, Item: item})
	return item
}

func createSubMenu(label string, children []*fyne.MenuItem, output *widget.Entry, instruction *widget.Label, parentPath ...string) *fyne.MenuItem {
	fullPath := buildFullPath(label, parentPath)
	subItem := fyne.NewMenuItem(label, nil)
	subItem.ChildMenu = fyne.NewMenu(label, children...)
	for _, child := range children {
		registerNested(child, fullPath, output, instruction)
	}
	return subItem
}

func registerNested(item *fyne.MenuItem, parent string, output *widget.Entry, instruction *widget.Label) {
	fullPath := parent + " ‚Üí " + item.Label
	if item.ChildMenu != nil {
		for _, child := range item.ChildMenu.Items {
			registerNested(child, fullPath, output, instruction)
		}
	} else {
		item.Action = func() {
			fmt.Printf("üëâ –ù–∞–∂–∞—Ç –ø—É–Ω–∫—Ç: %s\n", fullPath)
			if targetItem.Path == fullPath {
				handleCorrectSelection(fullPath, output, instruction)
			} else {
				showWrongSelection(fullPath, output)
			}
		}
		allMenuItems = append(allMenuItems, MenuItemInfo{Path: fullPath, Item: item})
	}
}

func nextTrial(instruction *widget.Label, output *widget.Entry) {
	if trialCount >= maxTrials {
		instruction.SetText("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
		output.SetText(output.Text + "\nüéâ –í—Å–µ 10 –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n")
		showChart(results)
		return
	}

	targetItem = allMenuItems[rand.Intn(len(allMenuItems))]
	startTime = time.Now()
	trialCount++
	text := fmt.Sprintf("–ü–æ–ø—ã—Ç–∫–∞ %d: –≤—ã–±–µ—Ä–∏—Ç–µ \"%s\"", trialCount, targetItem.Path)
	instruction.SetText(text)
	output.SetText(output.Text + "\nüîî " + text + "\n")
}

func handleCorrectSelection(label string, output *widget.Entry, instruction *widget.Label) {
	elapsed := time.Since(startTime)
	n := countAlternatives(label)
	hick := hicksLawTime(n)
	results = append(results, TrialResult{
		TrialNum:     trialCount,
		Path:         label,
		ActualTimeMs: elapsed.Milliseconds(),
		HickTimeMs:   hick,
	})
	result := fmt.Sprintf("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: %s\n‚è± –†–µ–∞–∫—Ü–∏—è: %d –º—Å\nüìä –ü–æ –•–∏–∫—É: %.2f –º—Å\n",
		label, elapsed.Milliseconds(), hick)
	output.SetText(output.Text + result)
	go func() {
		time.Sleep(1 * time.Second)
		nextTrial(instruction, output)
	}()
}

func showWrongSelection(clickedPath string, output *widget.Entry) {
	msg := fmt.Sprintf("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: \"%s\"\n", clickedPath)
	output.SetText(output.Text + msg)

	win := fyne.CurrentApp().Driver().AllWindows()[0]
	dialog.ShowInformation("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É–Ω–∫—Ç", fmt.Sprintf("–í—ã –≤—ã–±—Ä–∞–ª–∏: %s\n–û–∂–∏–¥–∞–µ—Ç—Å—è: %s", clickedPath, targetItem.Path), win)
}

func countAlternatives(path string) int {
	level := len(strings.Split(path, "‚Üí"))
	count := 0
	for _, item := range allMenuItems {
		if len(strings.Split(item.Path, "‚Üí")) == level {
			count++
		}
	}
	return count
}

func hicksLawTime(n int) float64 {
	return a + b*math.Log2(float64(n)+1)
}

func buildFullPath(label string, parent []string) string {
	if len(parent) == 0 {
		return label
	}
	return strings.Join(append(parent, label), " ‚Üí ")
}

func showChart(results []TrialResult) {
	win := fyne.CurrentApp().NewWindow("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º")
	win.Resize(fyne.NewSize(800, 600))

	var bars []fyne.CanvasObject
	var maxVal int64 = 1

	for _, r := range results {
		if r.ActualTimeMs > maxVal {
			maxVal = r.ActualTimeMs
		}
	}

	for _, r := range results {
		lbl := canvas.NewText(fmt.Sprintf("–ü–æ–ø—ã—Ç–∫–∞ %d", r.TrialNum), theme.ForegroundColor())
		lbl.TextSize = 16

		barActual := canvas.NewRectangle(theme.PrimaryColor())
		barHick := canvas.NewRectangle(theme.DisabledColor())

		barActual.SetMinSize(fyne.NewSize(float32(r.ActualTimeMs)*500/float32(maxVal), 20))
		barHick.SetMinSize(fyne.NewSize(float32(r.HickTimeMs)*500/float32(maxVal), 20))

		bars = append(bars, container.NewVBox(
			lbl,
			container.NewHBox(barActual, canvas.NewText(fmt.Sprintf("–§–∞–∫—Ç: %d –º—Å", r.ActualTimeMs), theme.ForegroundColor())),
			container.NewHBox(barHick, canvas.NewText(fmt.Sprintf("–•–∏–∫: %.0f –º—Å", r.HickTimeMs), theme.ForegroundColor())),
			widget.NewSeparator(),
		))
	}

	scroll := container.NewVScroll(container.NewVBox(bars...))
	win.SetContent(scroll)
	win.Show()
}
